# Python Lists

A list in Python is a versatile and mutable collection of items. It is an ordered and indexed data structure that can store a variety of data types. Lists are defined by enclosing elements within square brackets ([]), and elements are separated by commas. Lists in Python can contain elements of different types, including numbers, strings, and even other lists.

#Creating Lists

# Example 1: Creating a list of numbers
numbers = [1, 2, 3, 4, 5]

# Example 2: Creating a list of strings
fruits = ['apple', 'banana', 'orange', 'grape', 'kiwi']

# Example 3: Creating a mixed-type list
mixed_list = [1, 'hello', 3.14, True, ['nested', 'list']]

# Example 4: Creating an empty list
empty_list = []

# Example 5: Creating a list using list comprehension
squared_numbers = [x**2 for x in range(1, 6)]


Accessing Elements
# Accessing individual elements
first_element = numbers[0]  # 1
second_element = fruits[1]   # 'banana'

# Slicing a list
sliced_list = numbers[1:4]   # [2, 3, 4]



Modifying Lists
# Changing an element
fruits[2] = 'grapefruit'

# Appending elements
numbers.append(6)           # [1, 2, 3, 4, 5, 6]

# Extending a list
fruits.extend(['melon', 'pineapple'])  # ['apple', 'banana', 'grapefruit', 'grape', 'kiwi', 'melon', 'pineapple']

# Removing elements by value
fruits.remove('banana')     # ['apple', 'grapefruit', 'grape', 'kiwi', 'melon', 'pineapple']

# Removing elements by index
removed_element = numbers.pop(2)  # removed_element = 3, numbers = [1, 2, 4, 5]



List Operations
# Concatenating lists
combined_list = numbers + fruits

# Repeating a list
repeated_list = fruits * 2

# Checking membership
is_present = 'apple' in fruits  # True

# Finding the length of a list
list_length = len(numbers)      # 4



Iterating Over Lists
# Using a for loop
for fruit in fruits:
    print(fruit)

# Using list comprehension
uppercase_fruits = [f.upper() for f in fruits]



Lists are a fundamental and powerful data structure in Python, offering flexibility and ease of use for various programming tasks. They are extensively used in Python programming for storing, manipulating, and processing collections of data.
